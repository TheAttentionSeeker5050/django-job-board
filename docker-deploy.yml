version: '3'
services:
  # db:
  #   image: postgres:latest
  #   restart: always
  #   container_name: database
  #   # use the same env variables as in the django app
  #   env_file:
  #     - deploy.env
  #   environment:
  #     - "POSTGRES_HOST_AUTH_METHOD=trust"
  #   ports:
  #     - "5434:5432"
  #   volumes:
  #     - ./postgres_data:/var/lib/postgresql/data/
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - jobboard_django_network
  web:
    build:
      context: "./"
      dockerfile: "django-deploy.Dockerfile"
    restart: always
    container_name: web
    # use gunicorn to serve the django app on port 5000 production
    # command: python manage.py runserver --port 5000 env=production
    ports:
      - "5001:5000"
    volumes:
      - .:/usr/src/app
      - node_modules:/usr/src/app/node_modules
      # # static files
      - static:/usr/src/app/static
    env_file:
      - deploy.env
    # depends_on: 
    #   db:
    #     condition: service_healthy
    networks:
      - jobboard_django_network
      - jobboard_nginx_network
  
  nginx:
    container_name: nginx
    depends_on:
      - web
    build:
      context: "./nginx"
      dockerfile: nginx.Dockerfile
    ports:
      - "82:80"
    volumes:
      - static:/usr/src/app/static
    networks:
      - jobboard_nginx_network

volumes:
  # postgres_data:
  node_modules:
  static:
  
networks:
  jobboard_django_network:
    driver: bridge

  jobboard_nginx_network:
    driver: bridge